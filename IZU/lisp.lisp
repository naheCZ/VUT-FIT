(defun obsahuje (P S)
    (cond   ((null S) nil)
            ((= P (car S)) T)
            (t (obsahuje P (cdr S)))
    )
)

(defun sjednoceni3 (K L M)
    (cond   (t (sjednoceni2 M (sjednoceni2 K L)))
    )
)

(defun sjednoceni2 (K L)
    (cond   ((null K) L)
            ((null L) K)
            ((obsahuje (first K) L) (sjednoceni2 (rest K) L))
            (t (cons (first K) (sjednoceni2 (rest K) L)))
    )
)

(defun smaz (P S)
    (cond   ((null S) nil)
            ((= P (car S)) (cdr S))
            (t (cons (car S) (smaz P (cdr S))))
    )
)

(defun prunik (K L)
    (cond   ((null K) nil)
            ((null L) nil)
            ((obsahuje (car K) L) (cons (car K) (prunik (cdr K) L)))
            (t (prunik (cdr K) L))
    )
)

(defun prunik3 (K L M)
    (cond   (t (prunik (prunik K L) M))
    )
)

(defun preved (S)
    (cond   ((null S) nil)
            ((obsahuje (car S) (cdr S)) (preved (smaz (car S) S)))
            (t (cons (car S) (preved (cdr S))))
    )
)

(defun klesajici (S)
    (cond   ((null S) nil)
            ((null (cdr S)) T)
            ((< (car (cdr S)) (car S)) (klesajici (cdr S)))
    )
)

(defun rostouci (S)
    (cond   ((null S) nil)
            ((null (cdr S)) T)
            ((> (car (cdr S)) (car S)) (rostouci (cdr S)))
    )
)

(defun stejna (S)
    (cond   ((null S) nil)
            ((null (cdr S)) T)
            ((= (car S) (car (cdr S))) (stejna(cdr S)))
    )
)

(defun monnotonost (S)
    (cond   ((null S) nil)
            ((rostouci S) T)
            ((klesajici S) T)
            (t nil)
    )
)

(defun soucet (S)
    (cond   ((null S) nil)
            ((null (cdr S)) (car S))
            ((+ (car S) (soucet (cdr S))))
    )
)

(defun minimum (S)
    (cond   ((null S) nil)
            ((null (cdr S)) (car S))
            ((<= (car S) (minimum (cdr S))) (car S))
            (t (minimum (cdr S)))
    )
)

(defun maximum (S)
    (cond   ((null S) nil)
            ((null (cdr S)) (car S))
            ((>= (car S) (maximum (cdr S))) (car S))
            (t (maximum (cdr S)))
    )
)

(defun soucet_max_min (S)
    (cond   ((null S) nil)
            (t (+ (maximum S) (minimum S)))
    )
)

(defun podmnozina (K L)
    (cond   ((null L) nil)
            ((null K) T)
            ((obsahuje (car K) L) (podmnozina (cdr K) L))
            (t nil)
    )
)

(print (obsahuje 10 '(5 6 7 1 8 10)))
(print (sjednoceni3 '(1 2 3) '(4 5 6) '(7 8 9)))
(print (smaz 5 '(1 3 5 7 9)))
(print (preved '(1 2 2 3 4 3 5)))
(print (prunik '(1 2 3 4 5) '(7 6 5 4)))
(print (prunik3 '(1 2 3 4 5) '(7 6 5 4) '(2 3 4 5)))
(print (klesajici '(5 4 3 2 1)))
(print (rostouci '(1 2 3 4 5)))
(print (stejna '(1 1 1 1 1)))
(print (monnotonost '(5 4 1 2 1)))
(print (soucet '(2 2 1)))
(print (minimum '(9 5 2 6 4)))
(print (maximum '(4 6 9 5 2)))
(print (soucet_max_min '(4 6 9 5 2)))
(print (podmnozina '(1 2 7) '(0 1 5 2 4 3)))