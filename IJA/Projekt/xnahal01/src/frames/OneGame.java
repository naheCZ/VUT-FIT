package frames;

import dialogs.HintDialog;
import dialogs.LoadGameDialog;
import dialogs.NewGameDialog;
import graphics.MainDeckPanel;
import graphics.StackPanel;
import graphics.TargetPanel;
import model.board.Game;
import model.board.KlondikeGame;
import model.board.UndoStackItem;
import model.cards.Card;
import frames.FourGames;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;

/**
 * projekt: Solitaire Klondike - IJA 2016/2017
 * autori: Roman Nahalka (xnahal01), Adam Zivcak (xzivca03)
 * dátum: 6.5.2017
 *
 * Frame pro vykresleni jedneho hraciho platna.
 */

public class OneGame extends javax.swing.JFrame
{       
    private boolean gaming;
    private Game game;
    private ArrayList<StackPanel> stacks = new ArrayList<>(7);
    private ArrayList<TargetPanel> targets = new ArrayList<>(4);
    
    /**
     * Zakladni konstruktor tridy. Vola pri spusteni hry. 
     */
    public OneGame()
    {
        initComponents();
        this.gaming = false;
        this.stacksToArray();
        this.targetsToArray();
    }
    
    /**
     * Tento konstruktor slouzi pri navratu z Framu pro vice her zaroven.
     *
     * @param game Hra, ktera se ma spustit
     */
    public OneGame(Game game)
    {
        initComponents();
        this.game = game;
        this.stacksToArray();
        this.targetsToArray();
        this.showPanels();
        for(int i = 0; i < stacks.size(); i++)
            this.stacks.get(i).setStack(this.game.getStack(i), this.game);
        for(int i = 0; i < targets.size(); i++)
            this.targets.get(i).setDeck(this.game.getTarget(i), this.game);
        this.mainDeckPanel1.setDeck(this.game.getMainDeck(), this.game);
        this.wastedPanel.setDeck(this.game.getWasteDeck(), this.game);
        this.gaming = true;
        this.revalidateGame();
        this.repaintGame();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        mainTools = new javax.swing.JToolBar();
        mainTools.setLayout(new FlowLayout(FlowLayout.CENTER));
        newGameButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        saveGameButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        loadGameButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        undoButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        hintButton = new javax.swing.JButton();
        secondTools = new javax.swing.JToolBar();
        secondTools.setLayout(new FlowLayout(FlowLayout.RIGHT));
        scoreTextLabel = new javax.swing.JLabel();
        scoreLabel = new javax.swing.JLabel();
        tablePanel = new graphics.TablePanel();
        mainDeckPanel1 = new graphics.MainDeckPanel();
        targetPanel1 = new graphics.TargetPanel();
        targetPanel2 = new graphics.TargetPanel();
        targetPanel3 = new graphics.TargetPanel();
        targetPanel4 = new graphics.TargetPanel();
        stackPanel1 = new graphics.StackPanel();
        stackPanel4 = new graphics.StackPanel();
        stackPanel5 = new graphics.StackPanel();
        stackPanel6 = new graphics.StackPanel();
        stackPanel7 = new graphics.StackPanel();
        stackPanel3 = new graphics.StackPanel();
        stackPanel2 = new graphics.StackPanel();
        wastedPanel = new graphics.WastedPanel();
        mainMenu = new javax.swing.JMenuBar();
        gameMenu = new javax.swing.JMenu();
        newGameMenu = new javax.swing.JMenuItem();
        saveGameMenu = new javax.swing.JMenuItem();
        loadGameMenu = new javax.swing.JMenuItem();
        exitGameMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Solitaire Klondike");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(Toolkit.getDefaultToolkit().getImage(OneGame.class.getResource("/images/Icon.png")));

        mainTools.setFloatable(false);
        mainTools.setRollover(true);

        newGameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/New.png"))); // NOI18N
        newGameButton.setText("Nová hra");
        newGameButton.setFocusable(false);
        newGameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newGameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newGameButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newGameButtonActionPerformed(evt);
            }
        });
        mainTools.add(newGameButton);
        mainTools.add(jSeparator1);

        saveGameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Save.png"))); // NOI18N
        saveGameButton.setText("Uložit hru");
        saveGameButton.setFocusable(false);
        saveGameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveGameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveGameButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveGameButtonActionPerformed(evt);
            }
        });
        mainTools.add(saveGameButton);
        mainTools.add(jSeparator2);

        loadGameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Load.png"))); // NOI18N
        loadGameButton.setText("Načíst hru");
        loadGameButton.setFocusable(false);
        loadGameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadGameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadGameButton.addActionListener(new java.awt.event.ActionListener()
        {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                loadGameButtonActionPerformed(evt);
            }
        });
        mainTools.add(loadGameButton);
        mainTools.add(jSeparator3);

        undoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Undo.png"))); // NOI18N
        undoButton.setText("Tah zpět");
        undoButton.setFocusable(false);
        undoButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        undoButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        undoButton.addActionListener(new java.awt.event.ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent evt)
            {
                undoGameButtonActionPerformed(evt);
            }
        });
        mainTools.add(undoButton);
        mainTools.add(jSeparator4);

        hintButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Hint.png"))); // NOI18N
        hintButton.setText("Nápověda");
        hintButton.setFocusable(false);
        hintButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        hintButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        hintButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                hintButtonActionPerformed(evt);
            }
        });
        mainTools.add(hintButton);

        secondTools.setFloatable(false);
        secondTools.setRollover(true);

        scoreTextLabel.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        scoreTextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreTextLabel.setText("Skóre:    ");
        scoreTextLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        secondTools.add(scoreTextLabel);

        scoreLabel.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        scoreLabel.setText("" + 0);
        scoreLabel.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {

            }
        });
        secondTools.add(scoreLabel);

        mainDeckPanel1.setVisible(false);
        mainDeckPanel1.setPreferredSize(new Dimension(100, 150));
        mainDeckPanel1.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                mainDeckPanel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout mainDeckPanel1Layout = new javax.swing.GroupLayout(mainDeckPanel1);
        mainDeckPanel1.setLayout(mainDeckPanel1Layout);
        mainDeckPanel1Layout.setHorizontalGroup(
            mainDeckPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        mainDeckPanel1Layout.setVerticalGroup(
            mainDeckPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        targetPanel1.setVisible(false);
        targetPanel1.setPreferredSize(new Dimension(100, 150));

        targetPanel2.setVisible(false);
        targetPanel2.setPreferredSize(new Dimension(100, 150));

        targetPanel3.setVisible(false);
        targetPanel3.setPreferredSize(new Dimension(100, 150));

        targetPanel4.setVisible(false);
        targetPanel4.setPreferredSize(new Dimension(100, 150));

        stackPanel1.setVisible(false);
        stackPanel1.setPreferredSize(new Dimension(100, 150));

        stackPanel4.setVisible(false);
        stackPanel4.setPreferredSize(new Dimension(100, 150));

        stackPanel5.setVisible(false);
        stackPanel5.setPreferredSize(new Dimension(100, 150));

        stackPanel6.setVisible(false);
        stackPanel6.setPreferredSize(new Dimension(100, 150));

        stackPanel7.setVisible(false);
        stackPanel7.setPreferredSize(new Dimension(100, 150));

        stackPanel3.setVisible(false);
        stackPanel3.setPreferredSize(new Dimension(100, 150));

        stackPanel2.setVisible(false);
        stackPanel2.setPreferredSize(new Dimension(100, 150));

        wastedPanel.setVisible(false);
        wastedPanel.setPreferredSize(new Dimension(100, 150));
        wastedPanel.setOpaque(true);
        wastedPanel.setLayout(null);

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setPreferredSize(new Dimension(1024, 390));
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap(254, Short.MAX_VALUE)
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tablePanelLayout.createSequentialGroup()
                        .addComponent(stackPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(stackPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(stackPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tablePanelLayout.createSequentialGroup()
                                .addComponent(targetPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(targetPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(targetPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(targetPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(tablePanelLayout.createSequentialGroup()
                                .addComponent(stackPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(stackPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(stackPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(stackPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(tablePanelLayout.createSequentialGroup()
                        .addComponent(mainDeckPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(wastedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addContainerGap(259, Short.MAX_VALUE))
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tablePanelLayout.createSequentialGroup()
                        .addComponent(targetPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(stackPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tablePanelLayout.createSequentialGroup()
                        .addComponent(targetPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(stackPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tablePanelLayout.createSequentialGroup()
                        .addComponent(targetPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(stackPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tablePanelLayout.createSequentialGroup()
                        .addComponent(targetPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(stackPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tablePanelLayout.createSequentialGroup()
                        .addComponent(mainDeckPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(stackPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tablePanelLayout.createSequentialGroup()
                        .addComponent(wastedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(stackPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(tablePanelLayout.createSequentialGroup()
                        .addGap(209, 209, 209)
                        .addComponent(stackPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gameMenu.setText("Hra");

        newGameMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        newGameMenu.setText("Nová hra");
        newGameMenu.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newGameMenuActionPerformed(evt);
            }
        });
        gameMenu.add(newGameMenu);

        saveGameMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        saveGameMenu.setText("Uložit hru");
        saveGameMenu.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveGameMenuActionPerformed(evt);
            }
        });
        gameMenu.add(saveGameMenu);

        loadGameMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        loadGameMenu.setText("Načíst hru");
        loadGameMenu.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                loadGameMenuActionPerformed(evt);
            }
        });
        gameMenu.add(loadGameMenu);

        exitGameMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitGameMenu.setText("Ukončit hru");
        exitGameMenu.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exitGameMenuActionPerformed(evt);
            }
        });
        gameMenu.add(exitGameMenu);

        mainMenu.add(gameMenu);

        setJMenuBar(mainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTools, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(secondTools, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainTools, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(secondTools, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        this.setSize(1280, 1024);
        //pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newGameMenuActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newGameMenuActionPerformed
    {//GEN-HEADEREND:event_newGameMenuActionPerformed
        this.newGame();
    }//GEN-LAST:event_newGameMenuActionPerformed

    private void exitGameMenuActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitGameMenuActionPerformed
    {//GEN-HEADEREND:event_exitGameMenuActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_exitGameMenuActionPerformed

    private void newGameButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newGameButtonActionPerformed
    {//GEN-HEADEREND:event_newGameButtonActionPerformed
        this.newGame();        // TODO add your handling code here:
    }//GEN-LAST:event_newGameButtonActionPerformed

    private void loadGameButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
        this.loadGame();
    }                                              

    private void undoGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadGameButtonActionPerformed
        this.undoGame();
    }//GEN-LAST:event_loadGameButtonActionPerformed

    private void loadGameMenuActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_loadGameMenuActionPerformed
    {//GEN-HEADEREND:event_loadGameMenuActionPerformed
        this.loadGame();
    }//GEN-LAST:event_loadGameMenuActionPerformed

    private void saveGameMenuActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveGameMenuActionPerformed
    {//GEN-HEADEREND:event_saveGameMenuActionPerformed
        this.saveGame();
    }//GEN-LAST:event_saveGameMenuActionPerformed

    private void saveGameButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveGameButtonActionPerformed
    {//GEN-HEADEREND:event_saveGameButtonActionPerformed
        this.saveGame();
    }//GEN-LAST:event_saveGameButtonActionPerformed

    private void hintButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_hintButtonActionPerformed
    {//GEN-HEADEREND:event_hintButtonActionPerformed
        HintDialog dialog = new HintDialog(this, true);
        
        dialog.setText(this.game.getHint());
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
    }//GEN-LAST:event_hintButtonActionPerformed

    private void mainDeckPanel1MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_mainDeckPanel1MouseClicked
    {//GEN-HEADEREND:event_mainDeckPanel1MouseClicked
        if (this.game.dealCard()) {
            this.game.scoring(4);
            revalidateScore();
        }
        this.mainDeckPanel1.setImg();
        this.mainDeckPanel1.revalidate();
        this.mainDeckPanel1.repaint();
        this.wastedPanel.revalidate();
        this.wastedPanel.repaint();

        // uloženie ťahu
        this.game.pushItem(new UndoStackItem(mainDeckPanel1.getDeck(), wastedPanel.getDeck(), mainDeckPanel1, wastedPanel, true, this.game.getScore()));
    }//GEN-LAST:event_mainDeckPanel1MouseClicked

    /**
     * @param args Argumenty prikazove radky
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(OneGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(OneGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(OneGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(OneGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new OneGame().setVisible(true);
            }
        });
    }
    
    /**
     * Metoda, ktera se vola po stisku tlacitka pro novou hru. Metoda je vetvena
     * na dva bloky. Jeden se zavola, pokud jeste neni rezehrana zadna hra a 
     * druhy, pokud je jiz v tomto okne rozehrana hra. Pokud je rozehrana hra,
     * metoda otevre dialogove okno, ktere da uzivately na vyber, zda chce rozehranou
     * hru ukoncit a pustit novou a nebo spustit novou hru v novem hracim poli. 
     */
    public void newGame()
    {
        if(!(this.gaming))
        {
            this.showPanels();
        
            this.game = new KlondikeGame();
        
            this.game.laidCards();
            for(int i = 0; i < stacks.size(); i++)
                this.stacks.get(i).setStack(this.game.getStack(i), this.game);
            for(int i = 0; i < targets.size(); i++)
               this.targets.get(i).setDeck(this.game.getTarget(i), this.game);
            this.mainDeckPanel1.setDeck(this.game.getMainDeck(), this.game);
            this.wastedPanel.setDeck(this.game.getWasteDeck(), this.game);
            this.secondTools.add(scoreTextLabel);
            this.secondTools.add(scoreLabel);
            this.game.setScore(0);
            this.scoreLabel.setVisible(true);
            this.scoreLabel.setText(""+game.getScore());
            this.scoreTextLabel.setVisible(true);
            this.gaming = true;
        }
        
        else
        {
            NewGameDialog.Decision decision;
            
            NewGameDialog dialog = new NewGameDialog(this, true);
            dialog.setLocationRelativeTo(null);
            dialog.setVisible(true);
            decision = dialog.getDecision();
            
            if(decision == null)
                return;
            
            switch(decision)
            {
                case CLOSE:
                    break;
                    
                case NEW:
                    this.setVisible(false);
                    FourGames four = new FourGames(this.game);
                    four.setVisible(true);
                    this.dispose();
                    break;
                    
                case EXIT:
                    this.gaming = false;
                    this.setDefault();
                    this.newGame();
            }
        }
    }

    /**
     * Metoda, ktera provede tah zpatky. Pokud uzivatel
     * nema rozehranou hru nebo jeste neprovedl zadny tah,
     * bude o tom informovan v dialogovem okne.
     */
    private void undoGame() {
        if (this.game == null) {
            JOptionPane.showMessageDialog(this, "Nemáš rozehranou hru!");
            return;
        }
        UndoStackItem item = this.game.popItem();
        if (item == null) {
            JOptionPane.showMessageDialog(this, "Ještě si neprovedl tah!");
            return;
        }

        game.setScore(item.getScore());
        if (item.isOne_card()) {
            Container c_from ;
            Container c_to ;
            Component cmp = new Container();
            Card c = item.getCardDeckTo().pop();

            // undo otočenia mainDecku
            if (c == null) {
                int max_idx = item.getCardDeckFrom().size();
                for (int i = 0; i < max_idx; i++) {
                    c =  item.getCardDeckFrom().pop();
                    item.getCardDeckTo().put(c.color(), c.value());
                    item.getCardDeckTo().get().turnFaceUp();
                }
                c_from = item.getGraphicFrom();
                c_to = item.getGraphicTo();

                int size =  item.getGraphicFrom().getComponentCount();
                for (int j = size; j > 0; j--) {
                    cmp = c_to.getComponent(j);
                    c_from.remove(cmp);
                    c_to.add(cmp);
                }
            }
            else {
                if (item.isRotate())
                    item.getCardDeckFrom().rotateLastCard();

                if (item.getCardDeckFrom() != null) {
                    item.getCardDeckFrom().put(c.color(), c.value());
                    item.getCardDeckFrom().get().turnFaceUp();
                }

                c_from = item.getGraphicFrom();
                c_to = item.getGraphicTo();

                cmp = c_to.getComponent(c_to.getComponentCount() - 1);
                c_to.remove(cmp);
            }

            if (!(c_from instanceof MainDeckPanel))
                c_from.add(cmp);
            else {
                ((MainDeckPanel) c_from).setImg();
            }
        }
        else {
            int size = item.getSize()-1;
            Card c;
            int idx = item.getCardDeckTo().size() - size-1;

            if (item.isRotate())
                item.getCardDeckFrom().rotateLastCard();

            for (int i = 0; i <= size; i++) {
                c = item.getCardDeckTo().get(idx+i);
                item.getCardDeckFrom().put(c.color(), c.value());
                item.getCardDeckFrom().get().turnFaceUp();
            }
            for (int i = 0; i <= size; i++) {
                item.getCardDeckTo().pop();
            }

            Container c_from = item.getGraphicFrom();
            Container c_to = item.getGraphicTo();
            Component cmp;

            for (int i = 1; i < size; i++) {
                cmp = c_to.getComponent(c_to.getComponentCount() -1);
                c_to.remove(cmp);
                c_from.add(cmp);
            }
        }


        this.revalidateGame();
        this.repaintGame();
    }

    /**
     * Metoda, ktera aktualizuje skore po ukonceni tahu.
     */
    public void revalidateScore(){
        this.scoreLabel.setText(""+this.game.getScore());
        this.scoreLabel.revalidate();
        this.scoreLabel.repaint();
    }

    /**
     * Metoda, ktera nad vsemi grafickymi komponenty hry zavola metodu revalidate().
     */
    private void revalidateGame() {
        this.mainDeckPanel1.revalidate();
        revalidateScore();
        this.scoreTextLabel.revalidate();
        for(int i = 0; i < this.stacks.size(); i++)
            this.stacks.get(i).revalidate();
        this.tablePanel.revalidate();
        for(int i = 0; i < this.targets.size(); i++)
            this.targets.get(i).revalidate();
        this.wastedPanel.revalidate();
    }

    /**
     * Metoda, ktera nad vsemi grafickymi komponenty hry zavola metodu repaint().
     */
    private void repaintGame() {
        this.mainDeckPanel1.repaint();
        this.scoreLabel.repaint();
        this.scoreTextLabel.repaint();
        this.stackPanel1.repaint();
        this.stackPanel2.repaint();
        this.stackPanel3.repaint();
        this.stackPanel4.repaint();
        this.stackPanel5.repaint();
        this.stackPanel6.repaint();
        this.stackPanel7.repaint();
        this.tablePanel.repaint();
        this.targetPanel1.repaint();
        this.targetPanel2.repaint();
        this.targetPanel3.repaint();
        this.targetPanel4.repaint();
        this.wastedPanel.repaint();
    }

    /**
     * Metoda, ktera se zavola po stisku tlacitka pro nacteni hry. Metoda je vetvena
     * na dva bloky. Jeden se zavola, pokud jeste neni rezehrana zadna hra a 
     * druhy, pokud je jiz v tomto okne rozehrana hra. Pokud je rozehrana hra,
     * metoda otevre dialogove okno, ktere da uzivately na vyber, zda chce rozehranou
     * hru ukoncit a nacist hru a nebo nacist hru v novem hracim poli. Hra se nacita
     * ze drive ulozeneho souboru s priponou .kln.
     */
    public void loadGame()
    {
        if(!(this.gaming))
        {
            this.game = new KlondikeGame();
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("*.kln", "kln");
            chooser.setFileFilter(filter);
            chooser.setAcceptAllFileFilterUsed(false);
            int result = chooser.showOpenDialog(this);
            
            if(result == JFileChooser.APPROVE_OPTION)
            {
                this.game = game.loadGame(chooser.getSelectedFile());
                this.showPanels();
                for(int i = 0; i < stacks.size(); i++)
                    this.stacks.get(i).setStack(this.game.getStack(i), this.game);
                for(int i = 0; i < targets.size(); i++)
                {
                    this.targets.get(i).setDeck(this.game.getTarget(i), this.game);
                }
                this.mainDeckPanel1.setDeck(this.game.getMainDeck(), this.game);
                this.wastedPanel.setDeck(this.game.getWasteDeck(), this.game);
                this.gaming = true;
                this.mainDeckPanel1.setImg();
                this.revalidateGame();
                this.repaintGame();
            }
        }
        
        else
        {
            NewGameDialog.Decision decision;
            
            LoadGameDialog dialog = new LoadGameDialog(this, true);
            dialog.setLocationRelativeTo(null);
            dialog.setVisible(true);
            decision = dialog.getDecision();
            
            if(decision == null)
                return;
            
            switch(decision)
            {
                case CLOSE:
                    break;
                    
                case NEW:
                    Game loadGame = new KlondikeGame();
                    JFileChooser chooser = new JFileChooser();
                    FileNameExtensionFilter filter = new FileNameExtensionFilter("*.kln", "kln");
                    chooser.setFileFilter(filter);
                    chooser.setAcceptAllFileFilterUsed(false);
                    int result = chooser.showOpenDialog(this);
                    if(result == JFileChooser.APPROVE_OPTION)
                    {
                        loadGame = loadGame.loadGame(chooser.getSelectedFile());
                        this.setVisible(false);
                        FourGames four = new FourGames(this.game, loadGame);
                        four.setVisible(true);
                        this.dispose();
                    }
                    break;
                    
                case EXIT:
                    this.gaming = false;
                    this.setDefault();
                    this.loadGame();
            }
        }
    }
    
    /**
     * Metoda, ktera se zavola po stisku tlacitka pro ulozeni hry. Pokud uzivatel
     * nema rozehranou hru, bude o tom informovan pomoci dialogoveho okna. V 
     * opacnem pripade bude moci uzivatel ulozit hru kamkoliv do sveho pocitace.
     * Soubor bude ulozen s priponou kln.
     */
    public void saveGame()
    {
        if(this.gaming)
        {
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("*.kln", "kln");
            chooser.setFileFilter(filter);
            chooser.setAcceptAllFileFilterUsed(false);
            int result = chooser.showSaveDialog(this);
            
            if(result == JFileChooser.APPROVE_OPTION)
                this.game.saveGame(this.game, chooser.getSelectedFile());
        }
        
        else
        {
            JOptionPane.showMessageDialog(this, "Nemáš rozehranou hru!");
        }
    }
    
    /**
     * Nastaveni vsech prvku grafickeho rozhrani do vychozi polohy pri ruseni hrane hry.
     */
    public void setDefault()
    {        
        for(int i = 0; i < this.stacks.size(); i++)
        {
            this.stacks.get(i).removeAll();
            this.stacks.get(i).validate();
        }
        
        for(int i = 0; i < this.targets.size(); i++)
        {
            this.targets.get(i).removeAll();
            this.targets.get(i).validate();
        }
        
        this.mainDeckPanel1.removeAll();
        this.mainDeckPanel1.validate();
        this.wastedPanel.removeAll();
        this.wastedPanel.validate();

        this.tablePanel.removeAll();
        this.wastedPanel.validate();
        this.secondTools.removeAll();
        this.secondTools.validate();
        this.mainTools.removeAll();
        this.mainTools.validate();
        this.remove(this.tablePanel);
        this.remove(this.mainTools);
        this.initComponents();
        this.stacks.clear();
        this.targets.clear();
        this.stacksToArray();
        this.targetsToArray();
        this.revalidateGame();
        this.repaintGame();
        this.validate();
        this.repaint();
        this.tablePanel.revalidate();
        this.mainTools.revalidate();
        this.mainTools.repaint();
        this.game = null;
    }
    
    /**
     * Vsechny graficke objekty reprezentujici pracovni balicky vlozi do pole
     * pro lepsi manipulaci s nemi.
     */
    private void stacksToArray()
    {
        this.stacks.add(stackPanel1);
        this.stacks.add(stackPanel2);
        this.stacks.add(stackPanel3);
        this.stacks.add(stackPanel4);
        this.stacks.add(stackPanel5);
        this.stacks.add(stackPanel6);
        this.stacks.add(stackPanel7);
    }
    
    /**
     * Vsechny graficke objekty reprezentujici cilove balicky vlozi do pole pro
     * lepsi manipulaci s nemi.
     */
    private void targetsToArray() //Vsechny cilove pole vlozi do pole
    {
        this.targets.add(targetPanel1);
        this.targets.add(targetPanel2);
        this.targets.add(targetPanel3);
        this.targets.add(targetPanel4);
    }
    
    /**
     * Zviditelni vsechny graficke polozky, ktere jsou dulezite pro hru. Tyto
     * komponenty jsou pri spusteni aplikace neviditelne. Metoda se zavola po
     * spusteni nove hry nebo po nacteni hry.
     */
    public void showPanels()
    {
        mainDeckPanel1.setVisible(true);
        for(int i = 0; i < targets.size(); i++)
            targets.get(i).setVisible(true);
        for(int i = 0; i < stacks.size(); i++)
            stacks.get(i).setVisible(true);
        wastedPanel.setVisible(true);

        secondTools.add(scoreTextLabel);
        secondTools.add(scoreLabel);

        scoreLabel.setVisible(true);
        scoreTextLabel.setVisible(true);
        secondTools.setVisible(true);
    }
    
    public void handleDrag(JPanel panel)
    {
        final JPanel p = panel;
        panel.addMouseMotionListener(new MouseMotionAdapter()
        {
            @Override
            public void mouseDragged(MouseEvent me)
            {
                me.translatePoint(me.getComponent().getLocation().x, me.getComponent().getLocation().y);
                p.setLocation(me.getX(), me.getY());
            }
        });
    }
    
    /**
     * Metoda, ktera zjisti jestli je v okne rozehrana hra.
     * @return Jestli je rozehrana hra a nebo ne.
     */
    public boolean getGaming()
    {
        return this.gaming;
    }
    
    /**
     * Metoda, ktera nastavi, jestli je v okne rozehrana hra a nebo ne.
     * @param game Jestli se rozehrala nebo ukoncila
     */
    public void setGaming(boolean game)
    {
        this.gaming = game;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem exitGameMenu;
    private javax.swing.JMenu gameMenu;
    private javax.swing.JButton hintButton;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JButton loadGameButton;
    private javax.swing.JMenuItem loadGameMenu;
    private graphics.MainDeckPanel mainDeckPanel1;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JToolBar mainTools;
    private javax.swing.JButton newGameButton;
    private javax.swing.JMenuItem newGameMenu;
    private javax.swing.JButton saveGameButton;
    private javax.swing.JMenuItem saveGameMenu;
    private javax.swing.JLabel scoreLabel;
    private javax.swing.JLabel scoreTextLabel;
    private javax.swing.JToolBar secondTools;
    private graphics.StackPanel stackPanel1;
    private graphics.StackPanel stackPanel2;
    private graphics.StackPanel stackPanel3;
    private graphics.StackPanel stackPanel4;
    private graphics.StackPanel stackPanel5;
    private graphics.StackPanel stackPanel6;
    private graphics.StackPanel stackPanel7;
    private graphics.TablePanel tablePanel;
    private graphics.TargetPanel targetPanel1;
    private graphics.TargetPanel targetPanel2;
    private graphics.TargetPanel targetPanel3;
    private graphics.TargetPanel targetPanel4;
    private javax.swing.JButton undoButton;
    private graphics.WastedPanel wastedPanel;
    // End of variables declaration//GEN-END:variables
}


