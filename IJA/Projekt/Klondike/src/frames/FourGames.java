/**
 * projekt: Solitaire Klondike - IJA 2016/2017
 * autori: Roman Nahalka (xnahal01), Adam Zivcak (xzivca03)
 * dátum: 6.5.2017
 * 
 * Frame pro vykresleni az ctyrech hracich panelu. 
 */

package frames;

import dialogs.AlreadyPlayedDialog;
import dialogs.HintDialog;
import dialogs.SelectGameDialog;
import graphics.MainDeckPanel;
import graphics.StackPanel;
import graphics.TargetPanel;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import model.board.Game;
import model.board.KlondikeGame;
import model.board.UndoStackItem;
import model.cards.Card;

public class FourGames extends javax.swing.JFrame
{    
    private boolean gaming1;
    private boolean gaming2;
    private boolean gaming3;
    private boolean gaming4;
    private Game game1;
    private Game game2;
    private Game game3;
    private Game game4;
    private ArrayList<StackPanel> stacks1 = new ArrayList<>(7);
    private ArrayList<StackPanel> stacks2 = new ArrayList<>(7);
    private ArrayList<StackPanel> stacks3 = new ArrayList<>(7);
    private ArrayList<StackPanel> stacks4 = new ArrayList<>(7);
    private ArrayList<TargetPanel> targets1 = new ArrayList<>(4);
    private ArrayList<TargetPanel> targets2 = new ArrayList<>(4);
    private ArrayList<TargetPanel> targets3 = new ArrayList<>(4);
    private ArrayList<TargetPanel> targets4 = new ArrayList<>(4);
    
    
    /**
     * Konstruktor, ktery je zavolan, kdyz uzivatel zalozi v okne pro jednu hru
     * novou hru. Do prvniho hraciho pole je nactena jiz rozehrana hra, ve druhem hracim poly
     * bude vytvorena nova hra.
     * @param game Prenasena hra z okna pro jednu hru.
     */
    public FourGames(Game game)
    {
        initComponents();
        this.game1 = game;
        this.stacksToArray();
        this.targetsToArray();
        this.showPanels(1);
        for(int i = 0; i < stacks1.size(); i++)
            this.stacks1.get(i).setStack(this.game1.getStack(i), this.game1);
        for(int i = 0; i < targets1.size(); i++)
            this.targets1.get(i).setDeck(this.game1.getTarget(i), this.game1);
        this.mainDeckPanel1.setDeck(this.game1.getMainDeck(), this.game1);
        this.wastedPanel1.setDeck(this.game1.getWasteDeck(), this.game1);
        this.gaming1 = true;
        this.revalidateGame(1);
        this.repaintGame(1);
        this.newGame(2);
    }
    
    /**
     * Konstruktor, ktery je zavolan, kdyz uzivatel nacte her v okne pro jednu 
     * hru. Do prvniho hraciho pole je nactena jiz rozehrana hra, do druhe hraciho
     * pole bude nactena vybrana drive ulozena hra.
     * 
     * @param game Prenasena hra z okna pro jednu hru.
     * @param gameLoad Nactena hra
     */
    public FourGames(Game game, Game gameLoad)
    {
        initComponents();
        this.game1 = game;
        this.game2 = gameLoad;
        this.stacksToArray();
        this.targetsToArray();
        this.showPanels(1);
        this.showPanels(2);
        
        for(int i = 0; i < stacks1.size(); i++)
            this.stacks1.get(i).setStack(this.game1.getStack(i), this.game1);
        for(int i = 0; i < targets1.size(); i++)
            this.targets1.get(i).setDeck(this.game1.getTarget(i), this.game1);
        this.mainDeckPanel1.setDeck(this.game1.getMainDeck(), this.game1);
        this.wastedPanel1.setDeck(this.game1.getWasteDeck(), this.game1);
        this.gaming1 = true;
        this.revalidateGame(1);
        this.repaintGame(1);
        
        for(int i = 0; i < stacks2.size(); i++)
            this.stacks2.get(i).setStack(this.game2.getStack(i), this.game2);
        for(int i = 0; i < targets2.size(); i++)
            this.targets2.get(i).setDeck(this.game2.getTarget(i), this.game2);
        this.mainDeckPanel2.setDeck(this.game2.getMainDeck(), this.game2);
        this.wastedPanel2.setDeck(this.game2.getWasteDeck(), this.game2);
        this.gaming2 = true;
        this.mainDeckPanel2.setImg();
        this.revalidateGame(2);
        this.repaintGame(2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        mainTools = new javax.swing.JToolBar();
        newGameButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        saveGameButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        loadGameButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        undoButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        hintButton = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        exitGameButton = new javax.swing.JButton();
        secondTools = new javax.swing.JToolBar();
        scoreTextLabel1 = new javax.swing.JLabel();
        scoreLabel1 = new javax.swing.JLabel();
        scoreTextLabel2 = new javax.swing.JLabel();
        scoreLabel2 = new javax.swing.JLabel();
        scoreTextLabel3 = new javax.swing.JLabel();
        scoreLabel3 = new javax.swing.JLabel();
        scoreTextLabel4 = new javax.swing.JLabel();
        scoreLabel4 = new javax.swing.JLabel();
        tablePanel1 = new graphics.TablePanel();
        stackPanel1_1 = new graphics.StackPanel();
        stackPanel1_2 = new graphics.StackPanel();
        stackPanel1_3 = new graphics.StackPanel();
        stackPanel1_4 = new graphics.StackPanel();
        stackPanel1_5 = new graphics.StackPanel();
        stackPanel1_6 = new graphics.StackPanel();
        stackPanel1_7 = new graphics.StackPanel();
        mainDeckPanel1 = new graphics.MainDeckPanel();
        wastedPanel1 = new graphics.WastedPanel();
        targetPanel1_1 = new graphics.TargetPanel();
        targetPanel1_2 = new graphics.TargetPanel();
        targetPanel1_3 = new graphics.TargetPanel();
        targetPanel1_4 = new graphics.TargetPanel();
        tablePanel2 = new graphics.TablePanel();
        stackPanel2_1 = new graphics.StackPanel();
        stackPanel2_2 = new graphics.StackPanel();
        stackPanel2_3 = new graphics.StackPanel();
        stackPanel2_4 = new graphics.StackPanel();
        stackPanel2_5 = new graphics.StackPanel();
        stackPanel2_6 = new graphics.StackPanel();
        stackPanel2_7 = new graphics.StackPanel();
        mainDeckPanel2 = new graphics.MainDeckPanel();
        wastedPanel2 = new graphics.WastedPanel();
        targetPanel2_1 = new graphics.TargetPanel();
        targetPanel2_2 = new graphics.TargetPanel();
        targetPanel2_3 = new graphics.TargetPanel();
        targetPanel2_4 = new graphics.TargetPanel();
        tablePanel3 = new graphics.TablePanel();
        stackPanel3_1 = new graphics.StackPanel();
        stackPanel3_2 = new graphics.StackPanel();
        stackPanel3_3 = new graphics.StackPanel();
        stackPanel3_4 = new graphics.StackPanel();
        stackPanel3_5 = new graphics.StackPanel();
        stackPanel3_6 = new graphics.StackPanel();
        stackPanel3_7 = new graphics.StackPanel();
        mainDeckPanel3 = new graphics.MainDeckPanel();
        wastedPanel3 = new graphics.WastedPanel();
        targetPanel3_1 = new graphics.TargetPanel();
        targetPanel3_2 = new graphics.TargetPanel();
        targetPanel3_3 = new graphics.TargetPanel();
        targetPanel3_4 = new graphics.TargetPanel();
        tablePanel4 = new graphics.TablePanel();
        stackPanel4_1 = new graphics.StackPanel();
        stackPanel4_2 = new graphics.StackPanel();
        stackPanel4_3 = new graphics.StackPanel();
        stackPanel4_4 = new graphics.StackPanel();
        stackPanel4_5 = new graphics.StackPanel();
        stackPanel4_6 = new graphics.StackPanel();
        stackPanel4_7 = new graphics.StackPanel();
        mainDeckPanel4 = new graphics.MainDeckPanel();
        wastedPanel4 = new graphics.WastedPanel();
        targetPanel4_1 = new graphics.TargetPanel();
        targetPanel4_2 = new graphics.TargetPanel();
        targetPanel4_3 = new graphics.TargetPanel();
        targetPanel4_4 = new graphics.TargetPanel();
        mainMenu = new javax.swing.JMenuBar();
        gameMenu = new javax.swing.JMenu();
        newGameMenu = new javax.swing.JMenuItem();
        saveGameMenu = new javax.swing.JMenuItem();
        loadGameMenu = new javax.swing.JMenuItem();
        exitGameMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Solitaire Klondike");
        setIconImage(Toolkit.getDefaultToolkit().getImage(OneGame.class.getResource("/images/Icon.png")));

        mainTools.setRollover(true);

        newGameButton.setText("Nová hra");
        newGameButton.setFocusable(false);
        newGameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newGameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newGameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/New.png")));
        newGameButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newGameButtonActionPerformed(evt);
            }
        });
        mainTools.add(newGameButton);
        mainTools.add(jSeparator1);

        saveGameButton.setText("Uložit hru");
        saveGameButton.setFocusable(false);
        saveGameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveGameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveGameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Save.png")));
        saveGameButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveGameButtonActionPerformed(evt);
            }
        });
        mainTools.add(saveGameButton);
        mainTools.add(jSeparator2);

        loadGameButton.setText("Načíst hru");
        loadGameButton.setFocusable(false);
        loadGameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadGameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadGameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Load.png")));
        loadGameButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                loadGameButtonActionPerformed(evt);
            }
        });
        mainTools.add(loadGameButton);
        mainTools.add(jSeparator3);

        undoButton.setText("Tah zpět");
        undoButton.setFocusable(false);
        undoButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        undoButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        undoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Undo.png")));
        undoButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                undoButtonActionPerformed(evt);
            }
        });
        mainTools.add(undoButton);
        mainTools.add(jSeparator4);

        hintButton.setText("Nápověda");
        hintButton.setFocusable(false);
        hintButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        hintButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        hintButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Hint.png")));
        hintButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                hintButtonActionPerformed(evt);
            }
        });
        mainTools.add(hintButton);
        mainTools.add(jSeparator5);

        exitGameButton.setText("Ukončit hru");
        exitGameButton.setFocusable(false);
        exitGameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exitGameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exitGameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Exit.png")));
        exitGameButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exitGameButtonActionPerformed(evt);
            }
        });
        mainTools.add(exitGameButton);

        mainTools.setLayout(new FlowLayout(FlowLayout.CENTER));

        secondTools.setRollover(true);

        scoreTextLabel1.setText("Skóre 1: ");
        secondTools.add(scoreTextLabel1);
        secondTools.add(scoreLabel1);

        scoreTextLabel2.setText("Skóre 2: ");
        secondTools.add(scoreTextLabel2);
        secondTools.add(scoreLabel2);

        scoreTextLabel3.setText("Skóre 3: ");
        secondTools.add(scoreTextLabel3);
        secondTools.add(scoreLabel3);

        scoreTextLabel4.setText("Skóre 4: ");
        secondTools.add(scoreTextLabel4);
        secondTools.add(scoreLabel4);

        secondTools.setLayout(new FlowLayout(FlowLayout.RIGHT));

        tablePanel1.setPreferredSize(new java.awt.Dimension(702, 409));

        stackPanel1_1.setPreferredSize(new java.awt.Dimension(100, 150));

        stackPanel1_1.setVisible(false);

        stackPanel1_2.setVisible(false);

        stackPanel1_3.setVisible(false);

        stackPanel1_4.setVisible(false);

        stackPanel1_5.setVisible(false);

        stackPanel1_6.setVisible(false);

        stackPanel1_7.setVisible(false);

        mainDeckPanel1.setPreferredSize(new java.awt.Dimension(100, 150));
        mainDeckPanel1.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                mainDeckPanel1MouseClicked(evt);
            }
        });

        mainDeckPanel1.setVisible(false);

        javax.swing.GroupLayout mainDeckPanel1Layout = new javax.swing.GroupLayout(mainDeckPanel1);
        mainDeckPanel1.setLayout(mainDeckPanel1Layout);
        mainDeckPanel1Layout.setHorizontalGroup(
            mainDeckPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        mainDeckPanel1Layout.setVerticalGroup(
            mainDeckPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        wastedPanel1.setVisible(false);

        javax.swing.GroupLayout wastedPanel1Layout = new javax.swing.GroupLayout(wastedPanel1);
        wastedPanel1.setLayout(wastedPanel1Layout);
        wastedPanel1Layout.setHorizontalGroup(
            wastedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        wastedPanel1Layout.setVerticalGroup(
            wastedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        targetPanel1_1.setVisible(false);

        targetPanel1_2.setVisible(false);

        targetPanel1_3.setVisible(false);

        targetPanel1_4.setVisible(false);

        javax.swing.GroupLayout tablePanel1Layout = new javax.swing.GroupLayout(tablePanel1);
        tablePanel1.setLayout(tablePanel1Layout);
        tablePanel1Layout.setHorizontalGroup(
            tablePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(tablePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tablePanel1Layout.createSequentialGroup()
                        .addComponent(stackPanel1_1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(stackPanel1_2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(stackPanel1_3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tablePanel1Layout.createSequentialGroup()
                        .addComponent(mainDeckPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wastedPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7)
                .addGroup(tablePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tablePanel1Layout.createSequentialGroup()
                        .addComponent(targetPanel1_1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(targetPanel1_2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(targetPanel1_3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(targetPanel1_4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tablePanel1Layout.createSequentialGroup()
                        .addComponent(stackPanel1_4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(stackPanel1_5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(stackPanel1_6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(stackPanel1_7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tablePanel1Layout.setVerticalGroup(
            tablePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablePanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(tablePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mainDeckPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(wastedPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(targetPanel1_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(targetPanel1_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(targetPanel1_3, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(targetPanel1_4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15)
                .addGroup(tablePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(stackPanel1_7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(stackPanel1_6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stackPanel1_5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stackPanel1_4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stackPanel1_3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stackPanel1_2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stackPanel1_1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tablePanel2.setPreferredSize(new java.awt.Dimension(702, 409));

        stackPanel2_1.setPreferredSize(new java.awt.Dimension(100, 150));

        stackPanel2_1.setVisible(false);

        stackPanel2_2.setVisible(false);

        stackPanel2_3.setVisible(false);

        stackPanel2_4.setVisible(false);

        stackPanel2_5.setVisible(false);

        stackPanel2_6.setVisible(false);

        stackPanel2_7.setVisible(false);

        mainDeckPanel2.setPreferredSize(new java.awt.Dimension(100, 150));
        mainDeckPanel2.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                mainDeckPanel2MouseClicked(evt);
            }
        });

        mainDeckPanel2.setVisible(false);

        javax.swing.GroupLayout mainDeckPanel2Layout = new javax.swing.GroupLayout(mainDeckPanel2);
        mainDeckPanel2.setLayout(mainDeckPanel2Layout);
        mainDeckPanel2Layout.setHorizontalGroup(
            mainDeckPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        mainDeckPanel2Layout.setVerticalGroup(
            mainDeckPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        wastedPanel2.setVisible(false);

        javax.swing.GroupLayout wastedPanel2Layout = new javax.swing.GroupLayout(wastedPanel2);
        wastedPanel2.setLayout(wastedPanel2Layout);
        wastedPanel2Layout.setHorizontalGroup(
            wastedPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        wastedPanel2Layout.setVerticalGroup(
            wastedPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        targetPanel2_1.setVisible(false);

        targetPanel2_2.setVisible(false);

        targetPanel2_3.setVisible(false);

        targetPanel2_4.setVisible(false);

        javax.swing.GroupLayout tablePanel2Layout = new javax.swing.GroupLayout(tablePanel2);
        tablePanel2.setLayout(tablePanel2Layout);
        tablePanel2Layout.setHorizontalGroup(
            tablePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(tablePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tablePanel2Layout.createSequentialGroup()
                        .addComponent(stackPanel2_1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(stackPanel2_2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(stackPanel2_3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tablePanel2Layout.createSequentialGroup()
                        .addComponent(mainDeckPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wastedPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7)
                .addGroup(tablePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tablePanel2Layout.createSequentialGroup()
                        .addComponent(targetPanel2_1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(targetPanel2_2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(targetPanel2_3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(targetPanel2_4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tablePanel2Layout.createSequentialGroup()
                        .addComponent(stackPanel2_4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(stackPanel2_5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(stackPanel2_6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(stackPanel2_7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tablePanel2Layout.setVerticalGroup(
            tablePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablePanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(tablePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mainDeckPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(wastedPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(targetPanel2_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(targetPanel2_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(targetPanel2_3, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(targetPanel2_4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15)
                .addGroup(tablePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(stackPanel2_7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(stackPanel2_6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stackPanel2_5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stackPanel2_4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stackPanel2_3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stackPanel2_2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stackPanel2_1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(138, Short.MAX_VALUE))
        );

        tablePanel3.setPreferredSize(new java.awt.Dimension(702, 409));

        stackPanel3_1.setPreferredSize(new java.awt.Dimension(100, 150));

        stackPanel3_1.setVisible(false);

        stackPanel3_2.setVisible(false);

        stackPanel3_3.setVisible(false);

        stackPanel3_4.setVisible(false);

        stackPanel3_5.setVisible(false);

        stackPanel3_6.setVisible(false);

        stackPanel3_7.setVisible(false);

        mainDeckPanel3.setPreferredSize(new java.awt.Dimension(100, 150));
        mainDeckPanel3.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                mainDeckPanel3MouseClicked(evt);
            }
        });

        mainDeckPanel3.setVisible(false);

        javax.swing.GroupLayout mainDeckPanel3Layout = new javax.swing.GroupLayout(mainDeckPanel3);
        mainDeckPanel3.setLayout(mainDeckPanel3Layout);
        mainDeckPanel3Layout.setHorizontalGroup(
            mainDeckPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        mainDeckPanel3Layout.setVerticalGroup(
            mainDeckPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        wastedPanel3.setVisible(false);

        javax.swing.GroupLayout wastedPanel3Layout = new javax.swing.GroupLayout(wastedPanel3);
        wastedPanel3.setLayout(wastedPanel3Layout);
        wastedPanel3Layout.setHorizontalGroup(
            wastedPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        wastedPanel3Layout.setVerticalGroup(
            wastedPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        targetPanel3_1.setVisible(false);

        targetPanel3_2.setVisible(false);

        targetPanel3_3.setVisible(false);

        targetPanel3_4.setVisible(false);

        javax.swing.GroupLayout tablePanel3Layout = new javax.swing.GroupLayout(tablePanel3);
        tablePanel3.setLayout(tablePanel3Layout);
        tablePanel3Layout.setHorizontalGroup(
            tablePanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanel3Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(tablePanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tablePanel3Layout.createSequentialGroup()
                        .addComponent(stackPanel3_1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(stackPanel3_2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(stackPanel3_3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tablePanel3Layout.createSequentialGroup()
                        .addComponent(mainDeckPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wastedPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7)
                .addGroup(tablePanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tablePanel3Layout.createSequentialGroup()
                        .addComponent(targetPanel3_1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(targetPanel3_2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(targetPanel3_3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(targetPanel3_4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tablePanel3Layout.createSequentialGroup()
                        .addComponent(stackPanel3_4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(stackPanel3_5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(stackPanel3_6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(stackPanel3_7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tablePanel3Layout.setVerticalGroup(
            tablePanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablePanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(tablePanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mainDeckPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(wastedPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(targetPanel3_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(targetPanel3_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(targetPanel3_3, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(targetPanel3_4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15)
                .addGroup(tablePanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(stackPanel3_7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(stackPanel3_6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stackPanel3_5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stackPanel3_4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stackPanel3_3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stackPanel3_2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stackPanel3_1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(130, Short.MAX_VALUE))
        );

        tablePanel4.setPreferredSize(new java.awt.Dimension(702, 409));

        stackPanel4_1.setPreferredSize(new java.awt.Dimension(100, 150));

        stackPanel4_1.setVisible(false);

        stackPanel4_2.setVisible(false);

        stackPanel4_3.setVisible(false);

        stackPanel4_4.setVisible(false);

        stackPanel4_5.setVisible(false);

        stackPanel4_6.setVisible(false);

        stackPanel4_7.setVisible(false);

        mainDeckPanel4.setPreferredSize(new java.awt.Dimension(100, 150));
        mainDeckPanel4.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                mainDeckPanel4MouseClicked(evt);
            }
        });

        mainDeckPanel4.setVisible(false);

        javax.swing.GroupLayout mainDeckPanel4Layout = new javax.swing.GroupLayout(mainDeckPanel4);
        mainDeckPanel4.setLayout(mainDeckPanel4Layout);
        mainDeckPanel4Layout.setHorizontalGroup(
            mainDeckPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        mainDeckPanel4Layout.setVerticalGroup(
            mainDeckPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        wastedPanel4.setVisible(false);

        javax.swing.GroupLayout wastedPanel4Layout = new javax.swing.GroupLayout(wastedPanel4);
        wastedPanel4.setLayout(wastedPanel4Layout);
        wastedPanel4Layout.setHorizontalGroup(
            wastedPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        wastedPanel4Layout.setVerticalGroup(
            wastedPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        targetPanel4_1.setVisible(false);

        targetPanel4_2.setVisible(false);

        targetPanel4_3.setVisible(false);

        targetPanel4_4.setVisible(false);

        javax.swing.GroupLayout tablePanel4Layout = new javax.swing.GroupLayout(tablePanel4);
        tablePanel4.setLayout(tablePanel4Layout);
        tablePanel4Layout.setHorizontalGroup(
            tablePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanel4Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(tablePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tablePanel4Layout.createSequentialGroup()
                        .addComponent(stackPanel4_1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(stackPanel4_2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(stackPanel4_3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tablePanel4Layout.createSequentialGroup()
                        .addComponent(mainDeckPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wastedPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7)
                .addGroup(tablePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tablePanel4Layout.createSequentialGroup()
                        .addComponent(targetPanel4_1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(targetPanel4_2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(targetPanel4_3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(targetPanel4_4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tablePanel4Layout.createSequentialGroup()
                        .addComponent(stackPanel4_4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(stackPanel4_5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(stackPanel4_6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(stackPanel4_7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tablePanel4Layout.setVerticalGroup(
            tablePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablePanel4Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(tablePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mainDeckPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(wastedPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(targetPanel4_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(targetPanel4_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(targetPanel4_3, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(targetPanel4_4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15)
                .addGroup(tablePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(stackPanel4_7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(stackPanel4_6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stackPanel4_5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stackPanel4_4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stackPanel4_3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stackPanel4_2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stackPanel4_1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(130, Short.MAX_VALUE))
        );

        gameMenu.setText("Hra");

        newGameMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        newGameMenu.setText("Nová hra");
        newGameMenu.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newGameMenuActionPerformed(evt);
            }
        });
        gameMenu.add(newGameMenu);

        saveGameMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        saveGameMenu.setText("Uložit hru");
        saveGameMenu.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveGameMenuActionPerformed(evt);
            }
        });
        gameMenu.add(saveGameMenu);

        loadGameMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        loadGameMenu.setText("Načíst hru");
        loadGameMenu.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                loadGameMenuActionPerformed(evt);
            }
        });
        gameMenu.add(loadGameMenu);

        exitGameMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitGameMenu.setText("Ukončit hru");
        exitGameMenu.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exitGameMenuActionPerformed(evt);
            }
        });
        gameMenu.add(exitGameMenu);

        mainMenu.add(gameMenu);

        setJMenuBar(mainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTools, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(secondTools, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tablePanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE)
                        .addGap(1, 1, 1)
                        .addComponent(tablePanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tablePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE)
                        .addGap(1, 1, 1)
                        .addComponent(tablePanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE)))
                .addGap(5, 5, 5))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainTools, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tablePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                    .addComponent(tablePanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tablePanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                    .addComponent(tablePanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE))
                .addGap(1, 1, 1)
                .addComponent(secondTools, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newGameMenuActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newGameMenuActionPerformed
    {//GEN-HEADEREND:event_newGameMenuActionPerformed
        this.newGame(this.chooseGame());
    }//GEN-LAST:event_newGameMenuActionPerformed

    private void newGameButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newGameButtonActionPerformed
    {//GEN-HEADEREND:event_newGameButtonActionPerformed
        this.newGame(this.chooseGame());
    }//GEN-LAST:event_newGameButtonActionPerformed

    private void saveGameMenuActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveGameMenuActionPerformed
    {//GEN-HEADEREND:event_saveGameMenuActionPerformed
        this.saveGame(this.chooseGame());
    }//GEN-LAST:event_saveGameMenuActionPerformed

    private void saveGameButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveGameButtonActionPerformed
    {//GEN-HEADEREND:event_saveGameButtonActionPerformed
        this.saveGame(this.chooseGame());
    }//GEN-LAST:event_saveGameButtonActionPerformed

    private void loadGameMenuActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_loadGameMenuActionPerformed
    {//GEN-HEADEREND:event_loadGameMenuActionPerformed
        this.loadGame(this.chooseGame());
    }//GEN-LAST:event_loadGameMenuActionPerformed

    private void loadGameButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_loadGameButtonActionPerformed
    {//GEN-HEADEREND:event_loadGameButtonActionPerformed
        this.loadGame(this.chooseGame());
    }//GEN-LAST:event_loadGameButtonActionPerformed

    private void exitGameMenuActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitGameMenuActionPerformed
    {//GEN-HEADEREND:event_exitGameMenuActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_exitGameMenuActionPerformed

    private void undoButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_undoButtonActionPerformed
    {//GEN-HEADEREND:event_undoButtonActionPerformed
        this.undoGame(this.chooseGame());
    }//GEN-LAST:event_undoButtonActionPerformed

    private void mainDeckPanel1MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_mainDeckPanel1MouseClicked
    {//GEN-HEADEREND:event_mainDeckPanel1MouseClicked
        if (this.game1.dealCard()) {
            this.game1.scoring(4);
            revalidateScore(1);
        }
        this.mainDeckPanel1.setImg();
        this.mainDeckPanel1.revalidate();
        this.mainDeckPanel1.repaint();
        this.wastedPanel1.revalidate();
        this.wastedPanel1.repaint();

        // uloženie ťahu
        this.game1.pushItem(new UndoStackItem(mainDeckPanel1.getDeck(), wastedPanel1.getDeck(), mainDeckPanel1, wastedPanel1, true, this.game1.getScore()));
    }//GEN-LAST:event_mainDeckPanel1MouseClicked

    private void mainDeckPanel2MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_mainDeckPanel2MouseClicked
    {//GEN-HEADEREND:event_mainDeckPanel2MouseClicked
        if (this.game2.dealCard()) {
            this.game2.scoring(4);
            revalidateScore(2);
        }
        this.mainDeckPanel2.setImg();
        this.mainDeckPanel2.revalidate();
        this.mainDeckPanel2.repaint();
        this.wastedPanel2.revalidate();
        this.wastedPanel2.repaint();

        // uloženie ťahu
        this.game2.pushItem(new UndoStackItem(mainDeckPanel2.getDeck(), wastedPanel2.getDeck(), mainDeckPanel2, wastedPanel2, true, this.game2.getScore()));
    }//GEN-LAST:event_mainDeckPanel2MouseClicked

    private void mainDeckPanel3MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_mainDeckPanel3MouseClicked
    {//GEN-HEADEREND:event_mainDeckPanel3MouseClicked
        if (this.game3.dealCard()) {
            this.game3.scoring(4);
            revalidateScore(3);
        }
        this.mainDeckPanel3.setImg();
        this.mainDeckPanel3.revalidate();
        this.mainDeckPanel3.repaint();
        this.wastedPanel3.revalidate();
        this.wastedPanel3.repaint();

        // uloženie ťahu
        this.game3.pushItem(new UndoStackItem(mainDeckPanel3.getDeck(), wastedPanel3.getDeck(), mainDeckPanel3, wastedPanel3, true, this.game3.getScore()));
    }//GEN-LAST:event_mainDeckPanel3MouseClicked

    private void mainDeckPanel4MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_mainDeckPanel4MouseClicked
    {//GEN-HEADEREND:event_mainDeckPanel4MouseClicked
        if (this.game4.dealCard()) {
            this.game4.scoring(4);
            revalidateScore(4);
        }
        this.mainDeckPanel4.setImg();
        this.mainDeckPanel4.revalidate();
        this.mainDeckPanel4.repaint();
        this.wastedPanel4.revalidate();
        this.wastedPanel4.repaint();

        // uloženie ťahu
        this.game4.pushItem(new UndoStackItem(mainDeckPanel4.getDeck(), wastedPanel4.getDeck(), mainDeckPanel4, wastedPanel4, true, this.game4.getScore()));
    }//GEN-LAST:event_mainDeckPanel4MouseClicked

    private void exitGameButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitGameButtonActionPerformed
    {//GEN-HEADEREND:event_exitGameButtonActionPerformed
        int number = this.chooseGame();
        this.hidePanels(number);
        this.setDefault(number);
        this.cancelGaming(number);
        
        if(this.gamingNumber() == 1)
        {
            Game playing = getPlayingGame();
            this.setVisible(false);
            OneGame one = new OneGame(this.getPlayingGame());
            one.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_exitGameButtonActionPerformed

    private void hintButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_hintButtonActionPerformed
    {//GEN-HEADEREND:event_hintButtonActionPerformed
        HintDialog dialog;
        
        switch(this.chooseGame())
        {
            case 1:
                dialog = new HintDialog(this, true);
                dialog.setText(this.game1.getHint());
                dialog.setLocationRelativeTo(null);
                dialog.setVisible(true);
                break;
            case 2:
                dialog = new HintDialog(this, true);
                dialog.setText(this.game2.getHint());
                dialog.setLocationRelativeTo(null);
                dialog.setVisible(true);
                break;
            case 3:
                dialog = new HintDialog(this, true);
                dialog.setText(this.game3.getHint());
                dialog.setLocationRelativeTo(null);
                dialog.setVisible(true);
                break;
            case 4:
                dialog = new HintDialog(this, true);
                dialog.setText(this.game4.getHint());
                dialog.setLocationRelativeTo(null);
                dialog.setVisible(true);
                break;
        } 
    }//GEN-LAST:event_hintButtonActionPerformed
    
    /**
     * Metoda, ktera zjisti, ktera hra je rozehrana, pokud je jiz rozehrana jen
     * jedna jedina hra.
     * @return Hra, ktera je jako jedina rozehrana.
     */
    private Game getPlayingGame()
    {
        if(gaming1)
            return game1;
        else if(gaming2)
            return game2;
        else if(gaming3)
            return game3;
        else
            return game4;
    }
    
    /**
     * Metoda, ve ktere si uzivatel v dialogovem okne vybere, ve kterem okne chce
     * provest jiz drive zvolenou operaci. 
     * @return Cislo hraciho pole.
     */
    private int chooseGame()
    {
        SelectGameDialog dialog = new SelectGameDialog(this, true);
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
        return dialog.getGameNum();
    }
    
    /**
     * Metoda, ve ktere se uzivatel rozhodne, jestli chce ukoncit jiz rozehranou hru
     * a v danem hracim poli spustit novou hru nebo nacist drive ulozenou hru.
     * @return Informace, jestli chce uzivatel spustit nebo nacist hru v hracim
     * poli, kde je jiz rozehrana hra.
     */
    private boolean getChoice()
    {
        AlreadyPlayedDialog dialog = new AlreadyPlayedDialog(this, true);
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
        return dialog.getChoice();
    }
    
    /**
     * Metoda, ktera se vola po stisku tlacitka pro novou hru a vybranim cisla hraciho pole. 
     * Metoda je vetvena na dva bloky. Jeden se zavola, pokud v danem poli neni rozehrana hra a 
     * druhy, pokud je jiz v tomto poli rozehrana hra. Pokud je rozehrana hra,
     * metoda otevre dialogove okno, ktere da uzivately na vyber, zda chce rozehranou
     * hru ukoncit a pustit novou a nebo si to rozmyslel.
     * @param gameNum Cislo hraciho pole, do ktereho sa ma vytvorit nova hra.
     */
    private void newGame(int gameNum)
    {
        if(!(this.checkPlaying(gameNum)))
        {
            this.showPanels(gameNum);
        
            switch(gameNum)
            {
                case 1:
                    this.game1 = new KlondikeGame();        
                    this.game1.laidCards();
                    for(int i = 0; i < stacks1.size(); i++)
                        this.stacks1.get(i).setStack(this.game1.getStack(i), this.game1);
                    for(int i = 0; i < targets1.size(); i++)
                       this.targets1.get(i).setDeck(this.game1.getTarget(i), this.game1);
                    this.mainDeckPanel1.setDeck(this.game1.getMainDeck(), this.game1);
                    this.wastedPanel1.setDeck(this.game1.getWasteDeck(), this.game1);
                    this.game1.setScore(0);
                    this.scoreLabel1.setText(""+game1.getScore());
                    this.gaming1 = true;
                    this.mainDeckPanel1.setImg();
                    break;
                case 2:
                    this.game2 = new KlondikeGame();        
                    this.game2.laidCards();
                    for(int i = 0; i < stacks2.size(); i++)
                        this.stacks2.get(i).setStack(this.game2.getStack(i), this.game2);
                    for(int i = 0; i < targets2.size(); i++)
                       this.targets2.get(i).setDeck(this.game2.getTarget(i), this.game2);
                    this.mainDeckPanel2.setDeck(this.game2.getMainDeck(), this.game2);
                    this.wastedPanel2.setDeck(this.game2.getWasteDeck(), this.game2);
                    this.game2.setScore(0);
                    this.scoreLabel2.setText(""+game2.getScore());
                    this.gaming2 = true;
                    this.mainDeckPanel2.setImg();
                    break;
                case 3:
                    this.game3 = new KlondikeGame();        
                    this.game3.laidCards();
                    for(int i = 0; i < stacks3.size(); i++)
                        this.stacks3.get(i).setStack(this.game3.getStack(i), this.game3);
                    for(int i = 0; i < targets1.size(); i++)
                       this.targets3.get(i).setDeck(this.game3.getTarget(i), this.game3);
                    this.mainDeckPanel3.setDeck(this.game3.getMainDeck(), this.game3);
                    this.wastedPanel3.setDeck(this.game3.getWasteDeck(), this.game3);
                    this.game3.setScore(0);
                    this.scoreLabel3.setText(""+game3.getScore());
                    this.gaming3 = true;
                    this.mainDeckPanel3.setImg();
                    break;
                case 4:
                    this.game4 = new KlondikeGame();        
                    this.game4.laidCards();
                    for(int i = 0; i < stacks4.size(); i++)
                        this.stacks4.get(i).setStack(this.game4.getStack(i), this.game4);
                    for(int i = 0; i < targets4.size(); i++)
                       this.targets4.get(i).setDeck(this.game4.getTarget(i), this.game4);
                    this.mainDeckPanel4.setDeck(this.game4.getMainDeck(), this.game4);
                    this.wastedPanel4.setDeck(this.game4.getWasteDeck(), this.game4);
                    this.game4.setScore(0);
                    this.scoreLabel4.setText(""+game4.getScore());
                    this.gaming4 = true;
                    this.mainDeckPanel4.setImg();
                    break;
            }
        }
        
        else
        {
            if(!(this.getChoice()))
                return;
            
            this.cancelGaming(gameNum);
            this.setDefault(gameNum);
            this.newGame(gameNum);
        }
    }
    
    /**
     * Metoda, ktera se vola po stisku tlacitka pro nacteni hry a vybranim cisla hraciho pole. 
     * Metoda je vetvena na dva bloky. Jeden se zavola, pokud v danem poli neni rozehrana hra a 
     * druhy, pokud je jiz v tomto poli rozehrana hra. Pokud je rozehrana hra,
     * metoda otevre dialogove okno, ktere da uzivately na vyber, zda chce rozehranou
     * hru ukoncit a nacist drive ulozenou hru a nebo si to rozmyslel.
     * @param gameNum Cislo hraciho pole, do ktereho se ma nacist hra.
     */
    private void loadGame(int gameNum)
    {
        if(!(this.checkPlaying(gameNum)))
        {
            switch(gameNum)
            {
                case 1:
                    this.game1 = new KlondikeGame();
                    break;
                case 2:
                    this.game2 = new KlondikeGame();
                    break;
                case 3:
                    this.game3 = new KlondikeGame();
                    break;
                case 4:
                    this.game4 = new KlondikeGame();
                    break;
            }
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("*.kln", "kln");
            chooser.setFileFilter(filter);
            chooser.setAcceptAllFileFilterUsed(false);
            int result = chooser.showOpenDialog(this);
            
            if(result == JFileChooser.APPROVE_OPTION)
            {
                this.showPanels(gameNum);
                switch(gameNum)
                {
                    case 1:
                        this.game1 = game1.loadGame(chooser.getSelectedFile());
                        for(int i = 0; i < stacks1.size(); i++)
                            this.stacks1.get(i).setStack(this.game1.getStack(i), this.game1);
                        for(int i = 0; i < targets1.size(); i++)
                            this.targets1.get(i).setDeck(this.game1.getTarget(i), this.game1);
                        this.mainDeckPanel1.setDeck(this.game1.getMainDeck(), this.game1);
                        this.wastedPanel1.setDeck(this.game1.getWasteDeck(), this.game1);
                        this.gaming1 = true;
                        this.mainDeckPanel1.setImg();
                        break;
                    case 2:
                        this.game2 = game2.loadGame(chooser.getSelectedFile());
                        for(int i = 0; i < stacks2.size(); i++)
                            this.stacks2.get(i).setStack(this.game2.getStack(i), this.game2);
                        for(int i = 0; i < targets2.size(); i++)
                            this.targets2.get(i).setDeck(this.game2.getTarget(i), this.game2);
                        this.mainDeckPanel2.setDeck(this.game2.getMainDeck(), this.game2);
                        this.wastedPanel2.setDeck(this.game2.getWasteDeck(), this.game2);
                        this.gaming2 = true;
                        this.mainDeckPanel2.setImg();
                        break;
                    case 3:
                        this.game3 = game3.loadGame(chooser.getSelectedFile());
                        for(int i = 0; i < stacks3.size(); i++)
                            this.stacks3.get(i).setStack(this.game3.getStack(i), this.game3);
                        for(int i = 0; i < targets3.size(); i++)
                            this.targets3.get(i).setDeck(this.game3.getTarget(i), this.game3);
                        this.mainDeckPanel3.setDeck(this.game3.getMainDeck(), this.game3);
                        this.wastedPanel3.setDeck(this.game3.getWasteDeck(), this.game3);
                        this.gaming3 = true;
                        this.mainDeckPanel3.setImg();
                        break;
                    case 4:
                        this.game4 = game4.loadGame(chooser.getSelectedFile());
                        for(int i = 0; i < stacks4.size(); i++)
                            this.stacks4.get(i).setStack(this.game4.getStack(i), this.game4);
                        for(int i = 0; i < targets4.size(); i++)
                            this.targets4.get(i).setDeck(this.game4.getTarget(i), this.game4);
                        this.mainDeckPanel4.setDeck(this.game4.getMainDeck(), this.game4);
                        this.wastedPanel4.setDeck(this.game4.getWasteDeck(), this.game4);
                        this.gaming4 = true;
                        this.mainDeckPanel4.setImg();
                        break;
                }
                this.revalidateGame(gameNum);
                this.repaintGame(gameNum);
            }
        }
        
        else
        {
            if(!(this.getChoice()))
                return;

                   
            
            this.cancelGaming(gameNum);
            this.setDefault(gameNum);
            this.loadGame(gameNum);
        }
    }
    
    /**
     * Metoda, ktera zjisti, kolik ma uzivatel rozehranych her.
     * @return Pocet rozehranych her.
     */
    private int gamingNumber()
    {
        int number = 0;
        
        if(gaming1)
            number++;
        if(gaming2)
            number++;
        if(gaming3)
            number++;
        if(gaming4)
            number++;
        
        return number;
    }
    
    /**
     * Metoda, ktera zrusi informaci o hrani hry v danem hracim poli. Metoda se
     * vola pri ukonceni hry.
     * @param gameNum Cislo hraciho pole
     */
    public void cancelGaming(int gameNum)
    {
        switch(gameNum)
        {
            case 1:
                this.gaming1 = false;
                break;
            case 2:
                this.gaming2 = false;
                break;
            case 3:
                this.gaming3 = false;
                break;
            case 4:
                this.gaming4 = false;
                break;
        }
    }
    
    /**
     * Metoda, ktera se zavola po stisku tlacitka pro ulozeni hry a vybranim hraciho pole. 
     * Pokud uzivatel nema v danem poli rozehranou hru, bude o tom informovan pomoci 
     * dialogoveho okna. V opacnem pripade bude moci uzivatel ulozit hru kamkoliv do sveho pocitace.
     * Soubor bude ulozen s priponou kln.
     * @param gameNum Cislo hraciho pole
     */
    private void saveGame(int gameNum)
    {
        if(this.checkPlaying(gameNum))
        {
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("*.kln", "kln");
            chooser.setFileFilter(filter);
            chooser.setAcceptAllFileFilterUsed(false);
            int result = chooser.showSaveDialog(this);
            
            if(result == JFileChooser.APPROVE_OPTION)
            {
                switch(gameNum)
                {
                    case 1:
                        this.game1.saveGame(this.game1, chooser.getSelectedFile());
                        break;
                    case 2:
                        this.game2.saveGame(this.game2, chooser.getSelectedFile());
                        break;
                    case 3:
                        this.game3.saveGame(this.game3, chooser.getSelectedFile());
                        break;
                    case 4:
                        this.game4.saveGame(this.game4, chooser.getSelectedFile());
                        break;
                }
            }
        }
        
        else
        {
            JOptionPane.showMessageDialog(this, "V tomto hracím poli nemáš rozehranou hru!");
        }
    }
    
    /**
     * Metoda, ktera v danem hracim poli provede tah zpatky. Pokud uzivatel v tomto
     * poli nema rozehranou hru nebo jeste neprovedl, bude o tom informovan v
     * dialogovem okne.
     * @param gameNum Cislo hraciho pole
     */
    private void undoGame(int gameNum)
    {
        UndoStackItem item = this.game1.popItem();
        
        switch(gameNum)
        {
            case 1:
                if (this.game1 == null) 
                {
                    JOptionPane.showMessageDialog(this, "Nemáš rozehranou hru!");
                    return;
                }
                item = this.game1.popItem();
                if (item == null)
                {
                    JOptionPane.showMessageDialog(this, "Ještě si neprovedl tah!");
                    return;
                }
                game1.setScore(item.getScore());
                break;
            case 2:
                if (this.game2 == null) 
                {
                    JOptionPane.showMessageDialog(this, "Nemáš rozehranou hru!");
                    return;
                }
                item = this.game2.popItem();
                if (item == null)
                {
                    JOptionPane.showMessageDialog(this, "Ještě si neprovedl tah!");
                    return;
                }
                game2.setScore(item.getScore());
                break;
            case 3:
                if (this.game3 == null) 
                {
                    JOptionPane.showMessageDialog(this, "Nemáš rozehranou hru!");
                    return;
                }
                item = this.game3.popItem();
                if (item == null)
                {
                    JOptionPane.showMessageDialog(this, "Ještě si neprovedl tah!");
                    return;
                }
                game3.setScore(item.getScore());
                break;
            case 4:
                if (this.game4 == null) 
                {
                    JOptionPane.showMessageDialog(this, "Nemáš rozehranou hru!");
                    return;
                }
                item = this.game4.popItem();
                if (item == null)
                {
                    JOptionPane.showMessageDialog(this, "Ještě si neprovedl tah!");
                    return;
                }
                game4.setScore(item.getScore());
                break;
        }
        if (item.isOne_card()) {
            Container c_from ;
            Container c_to ;
            Component cmp = new Container();
            Card c = item.getCardDeckTo().pop();

            // undo otočenia mainDecku
            if (c == null) {
                int max_idx = item.getCardDeckFrom().size();
                for (int i = 0; i < max_idx; i++) {
                    c =  item.getCardDeckFrom().pop();
                    item.getCardDeckTo().put(c.color(), c.value());
                    item.getCardDeckTo().get().turnFaceUp();
                }
                c_from = item.getGraphicFrom();
                c_to = item.getGraphicTo();

                int size =  item.getGraphicFrom().getComponentCount();
                for (int j = size; j > 0; j--) {
                    cmp = c_to.getComponent(j);
                    c_from.remove(cmp);
                    c_to.add(cmp);
                }
            }
            else {
                if (item.isRotate())
                    item.getCardDeckFrom().rotateLastCard();

                if (item.getCardDeckFrom() != null) {
                    item.getCardDeckFrom().put(c.color(), c.value());
                    item.getCardDeckFrom().get().turnFaceUp();
                }

                c_from = item.getGraphicFrom();
                c_to = item.getGraphicTo();

                cmp = c_to.getComponent(c_to.getComponentCount() - 1);
                c_to.remove(cmp);
            }

            if (!(c_from instanceof MainDeckPanel))
                c_from.add(cmp);
            else {
                ((MainDeckPanel) c_from).setImg();
            }
        }
        else {
            System.err.println("viacero undo");
            int size = item.getSize()-1;
            Card c;
            int idx = item.getCardDeckTo().size() - size-1;

            if (item.isRotate())
                item.getCardDeckFrom().rotateLastCard();

            for (int i = 0; i <= size; i++) {
                c = item.getCardDeckTo().get(idx+i);
                item.getCardDeckFrom().put(c.color(), c.value());
                item.getCardDeckFrom().get().turnFaceUp();
            }
            for (int i = 0; i <= size; i++) {
                item.getCardDeckTo().pop();
            }

            Container c_from = item.getGraphicFrom();
            Container c_to = item.getGraphicTo();
            Component cmp;

            for (int i = 1; i < size; i++) {
                cmp = c_to.getComponent(c_to.getComponentCount() -1);
                c_to.remove(cmp);
                c_from.add(cmp);
            }
        }


        this.revalidateGame(gameNum);
        this.repaintGame(gameNum);
    }
    
    /**
     * Metoda, ktera zjisti, jestli je v danem hracim poli rozehrana hra.
     * @param gameNum Cislo hraciho pole
     * @return Informace, jestli je v danem poli rozehrana hra.
     */
    private boolean checkPlaying(int gameNum)
    {
        switch(gameNum)
        {
            case 1:
                return gaming1;
            case 2:
                return gaming2;
            case 3:
                return gaming3;
            case 4:
                return gaming4;
        }
        
        return false;
    }
    
    /**
     * Nastaveni vsech prvku grafickeho rozhrani v danem hracim poli do vychozi 
     * polohy pri ruseni hrane hry.
     * @param gameNum Cislo hraciho pole
     */
    public void setDefault(int gameNum) //Zalozeni nove hry pri ruseni prave hrane
    {        
        switch(gameNum)
        {
            case 1:
                for(int i = 0; i < this.stacks1.size(); i++)
                {
                    this.stacks1.get(i).removeAll();
                    this.stacks1.get(i).validate();
                }

                for(int i = 0; i < this.targets1.size(); i++)
                {
                    this.targets1.get(i).removeAll();
                    this.targets1.get(i).validate();
                }

                this.mainDeckPanel1.removeAll();
                this.mainDeckPanel1.validate();
                
                this.wastedPanel1.popCards();
                this.wastedPanel1.removeAll();
                this.wastedPanel1.validate();

                this.revalidateGame(gameNum);
                this.repaintGame(gameNum);
                this.validate();
                this.repaint();
                this.tablePanel1.revalidate();
                this.game1 = null;
                break;
            case 2:
                for(int i = 0; i < this.stacks2.size(); i++)
                {
                    this.stacks2.get(i).removeAll();
                    this.stacks2.get(i).validate();
                }

                for(int i = 0; i < this.targets2.size(); i++)
                {
                    this.targets2.get(i).removeAll();
                    this.targets2.get(i).validate();
                }

                this.mainDeckPanel2.removeAll();
                this.mainDeckPanel2.validate();
                
                this.wastedPanel2.popCards();
                this.wastedPanel2.removeAll();
                this.wastedPanel2.validate();

                this.revalidateGame(gameNum);
                this.repaintGame(gameNum);
                this.validate();
                this.repaint();
                this.tablePanel2.revalidate();
                this.game2 = null;
                break;
            case 3:
                for(int i = 0; i < this.stacks3.size(); i++)
                {
                    this.stacks3.get(i).removeAll();
                    this.stacks3.get(i).validate();
                }

                for(int i = 0; i < this.targets3.size(); i++)
                {
                    this.targets3.get(i).removeAll();
                    this.targets3.get(i).validate();
                }

                this.mainDeckPanel3.removeAll();
                this.mainDeckPanel3.validate();
                
                this.wastedPanel3.popCards();
                this.wastedPanel3.removeAll();
                this.wastedPanel3.validate();

                this.revalidateGame(gameNum);
                this.repaintGame(gameNum);
                this.validate();
                this.repaint();
                this.tablePanel3.revalidate();
                this.game3 = null;
                break;
            case 4:
                for(int i = 0; i < this.stacks4.size(); i++)
                {
                    this.stacks4.get(i).removeAll();
                    this.stacks4.get(i).validate();
                }

                for(int i = 0; i < this.targets4.size(); i++)
                {
                    this.targets4.get(i).removeAll();
                    this.targets4.get(i).validate();
                }

                this.mainDeckPanel4.removeAll();
                this.mainDeckPanel4.validate();
                
                this.wastedPanel4.popCards();
                this.wastedPanel4.removeAll();
                this.wastedPanel4.validate();

                this.revalidateGame(gameNum);
                this.repaintGame(gameNum);
                this.validate();
                this.repaint();
                this.tablePanel4.revalidate();
                this.game4 = null;
                break;
        }
    }
    
    /**
     * Metoda, ktera zjisti, ve kterem hracim poli je spustena zadana hra.
     * @param game Hra k porovnani
     * @return Cislo herniho pole
     */
    public int getGameNumber(Game game)
    {
        if(game.equals(this.game1))
            return 1;
        else if(game.equals(this.game2))
            return 2;
        else if(game.equals(this.game3))
            return 3;
        else if(game.equals(this.game4))
            return 4;
        else
            return 0;
    }
    
    /**
     *
     * Vsechny graficke objekty reprezentujici pracovni balicky vlozi do pole
     * pro lepsi manipulaci s nemi. Kazde hraci pole ma zvlast svoje pole.
     */
    private void stacksToArray() //Vsechny stacky vlozi do pole
    {
        this.stacks1.add(stackPanel1_1);
        this.stacks1.add(stackPanel1_2);
        this.stacks1.add(stackPanel1_3);
        this.stacks1.add(stackPanel1_4);
        this.stacks1.add(stackPanel1_5);
        this.stacks1.add(stackPanel1_6);
        this.stacks1.add(stackPanel1_7);
        
        this.stacks2.add(stackPanel2_1);
        this.stacks2.add(stackPanel2_2);
        this.stacks2.add(stackPanel2_3);
        this.stacks2.add(stackPanel2_4);
        this.stacks2.add(stackPanel2_5);
        this.stacks2.add(stackPanel2_6);
        this.stacks2.add(stackPanel2_7);
        
        this.stacks3.add(stackPanel3_1);
        this.stacks3.add(stackPanel3_2);
        this.stacks3.add(stackPanel3_3);
        this.stacks3.add(stackPanel3_4);
        this.stacks3.add(stackPanel3_5);
        this.stacks3.add(stackPanel3_6);
        this.stacks3.add(stackPanel3_7);
        
        this.stacks4.add(stackPanel4_1);
        this.stacks4.add(stackPanel4_2);
        this.stacks4.add(stackPanel4_3);
        this.stacks4.add(stackPanel4_4);
        this.stacks4.add(stackPanel4_5);
        this.stacks4.add(stackPanel4_6);
        this.stacks4.add(stackPanel4_7);
    }
    
    /**
     * Vsechny graficke objekty reprezentujici cilove balicky vlozi do pole pro
     * lepsi manipulaci s nemi. Kazde hraci pole ma svoje vlastni pole.
     */
    private void targetsToArray() //Vsechny cilove pole vlozi do pole
    {
        this.targets1.add(targetPanel1_1);
        this.targets1.add(targetPanel1_2);
        this.targets1.add(targetPanel1_3);
        this.targets1.add(targetPanel1_4);
        
        this.targets2.add(targetPanel2_1);
        this.targets2.add(targetPanel2_2);
        this.targets2.add(targetPanel2_3);
        this.targets2.add(targetPanel2_4);
        
        this.targets3.add(targetPanel3_1);
        this.targets3.add(targetPanel3_2);
        this.targets3.add(targetPanel3_3);
        this.targets3.add(targetPanel3_4);
       
        this.targets4.add(targetPanel4_1);
        this.targets4.add(targetPanel4_2);
        this.targets4.add(targetPanel4_3);
        this.targets4.add(targetPanel4_4);
    }
    
    /**
     * Metoda, ktera aktualizuje skore po ukonceni tahu.
     * @param gameNum Cislo hraciho pole
     */
    public void revalidateScore(int gameNum)
    {
        switch(gameNum)
        {
            case 1:
                this.scoreLabel1.setText(""+this.game1.getScore());
                this.scoreLabel1.revalidate();
                this.scoreLabel1.repaint();
                break;
            case 2:
                this.scoreLabel2.setText(""+this.game2.getScore());
                this.scoreLabel2.revalidate();
                this.scoreLabel2.repaint();
                break;
            case 3:
                this.scoreLabel3.setText(""+this.game3.getScore());
                this.scoreLabel3.revalidate();
                this.scoreLabel3.repaint();
                break;
            case 4:
                this.scoreLabel4.setText(""+this.game4.getScore());
                this.scoreLabel4.revalidate();
                this.scoreLabel4.repaint();
                break;
        }
    }

    /**
     * Metoda, ktera nad vsemi grafickymi komponenty v danem hracim poli zavola 
     * metodu revalidate().
     * @param gameNum Cislo hraciho pole
     */
    private void revalidateGame(int gameNum) 
    {
        switch(gameNum)
        {
            case 1:
                this.mainDeckPanel1.revalidate();
                revalidateScore(gameNum);
                this.scoreTextLabel1.revalidate();
                for(int i = 0; i < this.stacks1.size(); i++)
                    this.stacks1.get(i).revalidate();
                for(int i = 0; i < this.targets1.size(); i++)
                    this.targets1.get(i).revalidate();
                this.wastedPanel1.revalidate();
                this.tablePanel1.revalidate();
                break;
            case 2:
                this.mainDeckPanel2.revalidate();
                revalidateScore(gameNum);
                this.scoreTextLabel2.revalidate();
                for(int i = 0; i < this.stacks2.size(); i++)
                    this.stacks2.get(i).revalidate();
                for(int i = 0; i < this.targets2.size(); i++)
                    this.targets2.get(i).revalidate();
                this.wastedPanel2.revalidate();
                this.tablePanel2.revalidate();
                break;
            case 3:
                this.mainDeckPanel3.revalidate();
                revalidateScore(gameNum);
                this.scoreTextLabel3.revalidate();
                for(int i = 0; i < this.stacks3.size(); i++)
                    this.stacks3.get(i).revalidate();
                for(int i = 0; i < this.targets3.size(); i++)
                    this.targets3.get(i).revalidate();
                this.wastedPanel3.revalidate();
                this.tablePanel3.revalidate();
                break;
            case 4:
                this.mainDeckPanel4.revalidate();
                revalidateScore(gameNum);
                this.scoreTextLabel4.revalidate();
                for(int i = 0; i < this.stacks4.size(); i++)
                    this.stacks4.get(i).revalidate();
                for(int i = 0; i < this.targets4.size(); i++)
                    this.targets4.get(i).revalidate();
                this.wastedPanel4.revalidate();
                this.tablePanel4.revalidate();
                break;
        }
    }

    /**
     * Metoda, ktera nad vsemi grafickymi komponenty v danem hracim poli zavola 
     * metodu repaint().
     * @param gameNum Cislo hraciho pole
     */
    private void repaintGame(int gameNum) 
    {
        switch(gameNum)
        {
            case 1:
                this.mainDeckPanel1.repaint();
                revalidateScore(gameNum);
                this.scoreTextLabel1.repaint();
                for(int i = 0; i < this.stacks1.size(); i++)
                    this.stacks1.get(i).repaint();
                for(int i = 0; i < this.targets1.size(); i++)
                    this.targets1.get(i).repaint();
                this.wastedPanel1.repaint();
                this.tablePanel1.repaint();
                break;
            case 2:
                this.mainDeckPanel2.repaint();
                revalidateScore(gameNum);
                this.scoreTextLabel2.repaint();
                for(int i = 0; i < this.stacks2.size(); i++)
                    this.stacks2.get(i).repaint();
                for(int i = 0; i < this.targets2.size(); i++)
                    this.targets2.get(i).repaint();
                this.wastedPanel2.repaint();
                this.tablePanel2.repaint();
                break;
            case 3:
                this.mainDeckPanel3.repaint();
                revalidateScore(gameNum);
                this.scoreTextLabel3.repaint();
                for(int i = 0; i < this.stacks3.size(); i++)
                    this.stacks3.get(i).repaint();
                for(int i = 0; i < this.targets3.size(); i++)
                    this.targets3.get(i).repaint();
                this.wastedPanel3.repaint();
                this.tablePanel3.repaint();
                break;
            case 4:
                this.mainDeckPanel4.repaint();
                revalidateScore(gameNum);
                this.scoreTextLabel4.repaint();
                for(int i = 0; i < this.stacks4.size(); i++)
                    this.stacks4.get(i).repaint();
                for(int i = 0; i < this.targets4.size(); i++)
                    this.targets4.get(i).repaint();
                this.wastedPanel4.repaint();
                this.tablePanel4.repaint();
                break;
        }
    }
    
    /**
     * Zviditelni vsechny graficke polozky v danem hracim poli, ktere jsou dulezite 
     * pro hru. Tyto komponenty jsou pri spusteni aplikace neviditelne. Metoda 
     * se zavola po spusteni nove hry nebo po nacteni hry.
     * @param gameNum Cislo hraciho pole.
     */
    public void showPanels(int gameNum)
    {
        switch(gameNum)
        {
            case 1:
                mainDeckPanel1.setVisible(true);
                for(int i = 0; i < targets1.size(); i++)
                    targets1.get(i).setVisible(true);
                for(int i = 0; i < stacks1.size(); i++)
                    stacks1.get(i).setVisible(true);
                wastedPanel1.setVisible(true);
                break;
                
            case 2:
                mainDeckPanel2.setVisible(true);
                for(int i = 0; i < targets2.size(); i++)
                    targets2.get(i).setVisible(true);
                for(int i = 0; i < stacks2.size(); i++)
                    stacks2.get(i).setVisible(true);
                wastedPanel2.setVisible(true);
                break;
                
            case 3:
                mainDeckPanel3.setVisible(true);
                for(int i = 0; i < targets3.size(); i++)
                    targets3.get(i).setVisible(true);
                for(int i = 0; i < stacks3.size(); i++)
                    stacks3.get(i).setVisible(true);
                wastedPanel3.setVisible(true);
                break;
                
            case 4:
                mainDeckPanel4.setVisible(true);
                for(int i = 0; i < targets4.size(); i++)
                    targets4.get(i).setVisible(true);
                for(int i = 0; i < stacks4.size(); i++)
                    stacks4.get(i).setVisible(true);
                wastedPanel4.setVisible(true);
                break;
        }
    }
    
    /**
     * Metoda, ktera schova vsechny dulezite graficke komponenty pro hru v danem 
     * hracim poli. Metoda se vola po ukonceni jedne hry.
     * @param gameNum Cislo hraciho pole
     */
    public void hidePanels(int gameNum)
    {
        switch(gameNum)
        {
            case 1:
                mainDeckPanel1.setVisible(false);
                for(int i = 0; i < targets1.size(); i++)
                    targets1.get(i).setVisible(false);
                for(int i = 0; i < stacks1.size(); i++)
                    stacks1.get(i).setVisible(false);
                wastedPanel1.setVisible(false);
                break;
                
            case 2:
                mainDeckPanel2.setVisible(false);
                for(int i = 0; i < targets2.size(); i++)
                    targets2.get(i).setVisible(false);
                for(int i = 0; i < stacks2.size(); i++)
                    stacks2.get(i).setVisible(false);
                wastedPanel2.setVisible(false);
                break;
                
            case 3:
                mainDeckPanel3.setVisible(false);
                for(int i = 0; i < targets3.size(); i++)
                    targets3.get(i).setVisible(false);
                for(int i = 0; i < stacks3.size(); i++)
                    stacks3.get(i).setVisible(false);
                wastedPanel3.setVisible(false);
                break;
                
            case 4:
                mainDeckPanel4.setVisible(false);
                for(int i = 0; i < targets4.size(); i++)
                    targets4.get(i).setVisible(false);
                for(int i = 0; i < stacks4.size(); i++)
                    stacks4.get(i).setVisible(false);
                wastedPanel4.setVisible(false);
                break;
        }
    }
    
    public void handleDrag(JPanel panel)
    {
        final JPanel p = panel;
        panel.addMouseMotionListener(new MouseMotionAdapter()
        {
            @Override
            public void mouseDragged(MouseEvent me)
            {
                me.translatePoint(me.getComponent().getLocation().x, me.getComponent().getLocation().y);
                p.setLocation(me.getX(), me.getY());
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitGameButton;
    private javax.swing.JMenuItem exitGameMenu;
    private javax.swing.JMenu gameMenu;
    private javax.swing.JButton hintButton;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JButton loadGameButton;
    private javax.swing.JMenuItem loadGameMenu;
    private graphics.MainDeckPanel mainDeckPanel1;
    private graphics.MainDeckPanel mainDeckPanel2;
    private graphics.MainDeckPanel mainDeckPanel3;
    private graphics.MainDeckPanel mainDeckPanel4;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JToolBar mainTools;
    private javax.swing.JButton newGameButton;
    private javax.swing.JMenuItem newGameMenu;
    private javax.swing.JButton saveGameButton;
    private javax.swing.JMenuItem saveGameMenu;
    private javax.swing.JLabel scoreLabel1;
    private javax.swing.JLabel scoreLabel2;
    private javax.swing.JLabel scoreLabel3;
    private javax.swing.JLabel scoreLabel4;
    private javax.swing.JLabel scoreTextLabel1;
    private javax.swing.JLabel scoreTextLabel2;
    private javax.swing.JLabel scoreTextLabel3;
    private javax.swing.JLabel scoreTextLabel4;
    private javax.swing.JToolBar secondTools;
    private graphics.StackPanel stackPanel1_1;
    private graphics.StackPanel stackPanel1_2;
    private graphics.StackPanel stackPanel1_3;
    private graphics.StackPanel stackPanel1_4;
    private graphics.StackPanel stackPanel1_5;
    private graphics.StackPanel stackPanel1_6;
    private graphics.StackPanel stackPanel1_7;
    private graphics.StackPanel stackPanel2_1;
    private graphics.StackPanel stackPanel2_2;
    private graphics.StackPanel stackPanel2_3;
    private graphics.StackPanel stackPanel2_4;
    private graphics.StackPanel stackPanel2_5;
    private graphics.StackPanel stackPanel2_6;
    private graphics.StackPanel stackPanel2_7;
    private graphics.StackPanel stackPanel3_1;
    private graphics.StackPanel stackPanel3_2;
    private graphics.StackPanel stackPanel3_3;
    private graphics.StackPanel stackPanel3_4;
    private graphics.StackPanel stackPanel3_5;
    private graphics.StackPanel stackPanel3_6;
    private graphics.StackPanel stackPanel3_7;
    private graphics.StackPanel stackPanel4_1;
    private graphics.StackPanel stackPanel4_2;
    private graphics.StackPanel stackPanel4_3;
    private graphics.StackPanel stackPanel4_4;
    private graphics.StackPanel stackPanel4_5;
    private graphics.StackPanel stackPanel4_6;
    private graphics.StackPanel stackPanel4_7;
    private graphics.TablePanel tablePanel1;
    private graphics.TablePanel tablePanel2;
    private graphics.TablePanel tablePanel3;
    private graphics.TablePanel tablePanel4;
    private graphics.TargetPanel targetPanel1_1;
    private graphics.TargetPanel targetPanel1_2;
    private graphics.TargetPanel targetPanel1_3;
    private graphics.TargetPanel targetPanel1_4;
    private graphics.TargetPanel targetPanel2_1;
    private graphics.TargetPanel targetPanel2_2;
    private graphics.TargetPanel targetPanel2_3;
    private graphics.TargetPanel targetPanel2_4;
    private graphics.TargetPanel targetPanel3_1;
    private graphics.TargetPanel targetPanel3_2;
    private graphics.TargetPanel targetPanel3_3;
    private graphics.TargetPanel targetPanel3_4;
    private graphics.TargetPanel targetPanel4_1;
    private graphics.TargetPanel targetPanel4_2;
    private graphics.TargetPanel targetPanel4_3;
    private graphics.TargetPanel targetPanel4_4;
    private javax.swing.JButton undoButton;
    private graphics.WastedPanel wastedPanel1;
    private graphics.WastedPanel wastedPanel2;
    private graphics.WastedPanel wastedPanel3;
    private graphics.WastedPanel wastedPanel4;
    // End of variables declaration//GEN-END:variables
}
